#!/usr/bin/env bash

# Source the configuration variables
script_dir=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
source $script_dir/constants.sh

# Initialize function return variables
job_id=""
node_id=""
node_status=""

SCPSCRIPT() {
    ssh -q $user_id@openmind.mit.edu "mkdir -p $remote_script_dir"
    scp -q $script_dir/$vscode_script $user_id@openmind.mit.edu:$remote_script_dir
    ssh -q $user_id@openmind.mit.edu "cd $remote_script_dir && sed -i 's/\r//g' $vscode_script"
}

# Function definitions
SUBMITJOB() {
    echo "Starting VSCode Server"
    local ret=$(ssh $user_id@openmind.mit.edu "cd $remote_script_dir && sbatch -output=$vscode_out $@ $vscode_script")
    job_id=$(echo "$ret" | grep -oE '[0-9]+')
    echo "Job $job_id submitted"
}

WAITFORNODE() {
    for ((i = 0 ; i < timeout_limit ; i += 5 )); do
        node_status=$(ssh $user_id@openmind.mit.edu "squeue -u $user_id -j $job_id --format=%T --sort=-V --noheader")
        if [ "$node_status" == "RUNNING" ]; then
            return
        fi
        echo "Node not running, status: $node_status"
        echo "waiting 5s for node to run"
        sleep 5
    done
}

GETNODEID() {
    node_id=$(ssh $user_id@openmind.mit.edu "squeue -u $user_id -j $job_id --format=%N --sort=-V --noheader")
}

# Call functions
SCPSCRIPT
SUBMITJOB "$@" # returns job_id
WAITFORNODE # returns node_status
if [ "$node_status" == "RUNNING" ]; then
    GETNODEID # returns node_id
    om_rename_node $node_id
    echo "Job $job_id on node $node_id is $node_status"
else
    echo "Job $job_id request has timed out after 2 minutes"
    om_cancel $job_id
fi